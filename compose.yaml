# version: '3.9'  # Ensure the version is specified

services:
  product_service:
    build:
      context: ./product_service #Where is our docker file located?
      dockerfile: Dockerfile.dev #What is the name of our docker file in our directory
    volumes:
      - ./product_service:/code #Maps the local directory with our container
    depends_on: #This service will only run if the mentioned services are up and running
      - kafka-ui
      - broker
    ports:
      - "8011:8011" #Maps the localhost with our container port

  product_db:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: Product_db_Cont
    environment:
        - POSTGRES_USER=ammar
        - POSTGRES_PASSWORD=my_password
        - POSTGRES_DB=product_db
    ports:
        - '5433:5432'
    volumes:
        - product_db:/var/lib/postgresql/data

  # inventory_service:
  #   build:
  #     context: ./inventory_service
  #     dockerfile: Dockerfile.dev
  #   volumes:
  #     - ./inventory_service:/code
  #   depends_on:
  #     - kafka-ui
  #     - broker
  #   ports:
  #     - "8012:8012"

  # inventory_db:
  #   image: postgres:latest
  #   restart: always
  #   container_name: Inventory_db_Cont
  #   environment:
  #       - POSTGRES_USER=ammar
  #       - POSTGRES_PASSWORD=my_password
  #       - POSTGRES_DB=inventory_db
  #   ports:
  #       - '5434:5432'
  #   volumes:
  #       - inventory_db:/var/lib/postgresql/data

  # order_service:
  #   build:
  #     context: ./order_service
  #     dockerfile: Dockerfile.dev
  #   volumes:
  #     - ./order_service:/code
  #   depends_on:
  #     - kafka-ui
  #     - broker
  #   ports:
  #     - "8013:8013"

  # order_db:
  #   image: postgres:latest
  #   restart: always
  #   container_name: Order_db_Cont
  #   environment:
  #       - POSTGRES_USER=ammar
  #       - POSTGRES_PASSWORD=my_password
  #       - POSTGRES_DB=order_db
  #   ports:
  #       - '5435:5432'
  #   volumes:
  #       - order_db:/var/lib/postgresql/data

  # user_service:
  #   build:
  #     context: ./user_service
  #     dockerfile: Dockerfile.dev
  #   volumes:
  #     - ./user_service:/code
  #   depends_on:
  #     - kafka-ui
  #     - broker
  #   ports:
  #     - "8014:8014"

  # user_db:
  #   image: postgres:latest
  #   restart: always
  #   container_name: User_db_Cont
  #   environment:
  #       - POSTGRES_USER=ammar
  #       - POSTGRES_PASSWORD=my_password
  #       - POSTGRES_DB=user_db
  #   ports:
  #       - '5436:5432'
  #   volumes:
  #       - user_db:/var/lib/postgresql/data

  broker:
    image: apache/kafka:3.7.0
    hostname: broker
    container_name: broker
    ports:
      - '9092:9092'
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://broker:19092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: 'Local Kafka Cluster'
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'broker:19092'
      DYNAMIC_CONFIG_ENABLED: "true"
    depends_on:
      - broker

volumes:
  product_db:
   driver: local
  # user_db:
  #  driver: local
  # order_db:
  # notification_db:
  #  driver: local
  # inventory_db:
  #  driver: local

networks:
  default:
    driver: bridge